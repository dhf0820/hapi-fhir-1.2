<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

	<properties>
		<title>FHIR DSTU2 Support</title>
		<author email="jamesagnew@users.sourceforge.net">James Agnew</author>
	</properties>

	<body>

		<section name="Working with DSTU2">

			<p>
				Although DSTU2 has not yet been balloted and finalized by HL7, 
				there are several proposed changes which have been incorporated
				into the current 
				<a href="http://hl7-fhir.github.io/">Continuous Integration Builds</a>
				of the FHIR specification itself and many (if not most) of these changes will 
				end up in the final DSTU2 specification which is expected to be released 
				in mid-to-late-2015.
			</p>
			<p>
				DSTU2 is a significant upgrade to FHIR. While many things are unchanged, 
				lots of things have changed. Some of the the more interesting differences include:
			</p>
			<ul>
				<li>
					A new 
					<a href="http://hl7-fhir.github.io/bundle.html">Bundle</a> 
					format which is no longer based on Atom. The new format does resemble the
					Atom format so it will not be unfamiliar to anyone who is used to DSTU1 bundles
					but it has a few differences. On a conceptual level FHIR now defines a Bundle as
					just another type of resource.  
				</li>
				<li>
					New 
					<a href="http://hl7-fhir.github.io/resource.html">"id" and "meta"</a>
					elements which are present on all resources and explicitly state the resource's
					ID, version, tags, and a few other things. All of these concepts had previously
					existed in FHIR but were not a part of the resource body itself (rather they lived
					in URLs and HTTP headers outside of the payload)
				</li>
				<li>
					Numerous changes to the model, including attribute changes to existing resources,
					the addition of a number of new resources, and the removal of a few redundant ones
					as well.
				</li>
			</ul>
			
			<subsection name="Supporting DSTU2 In your Applications">
				
				<p>
					As of HAPI FHIR 0.9, support for DSTU2 has been added to the library. Although upgrading
					existing applications from DSTU1 to DSTU2 will not be painless, we have
					tried as much as possible to make it easy.
				</p>
				
				<p>
					First, support for DSTU2 capabilities has been added in a second optional dependency JAR which
					you must add to your classpath. This JAR is called <code>hapi-structures-dstu2-[version].jar</code>.
					See the <a href="./download.html">download page</a> for information on adding this JAR.
				</p>
				
				<p>
					The FHIR version you are targeting is a property of the 
					<a href="http://jamesagnew.github.io/hapi-fhir/apidocs/ca/uhn/fhir/context/FhirContext.html">FhirContext</a>.
					This means that if you use a FhirContext instance that is configured for DSTU2, any parsers, clients,
					servers, etc. which use that context will be operating in DSTU2 mode.
				</p>

				<p>
					To create a DSTU2 context, simply use the "forDstu2" factory method on the FhirContext class:
				</p>
				
				<macro name="snippet">
					<param name="id" value="context" />
					<param name="file" value="examples/src/main/java/example/Dstu2Examples.java" />
				</macro>
				
			</subsection>
			
			<subsection name="DSTU2 Servers">
				
				<p>
					To support DSTU2 in your server, simply set the FhirContext in the server to be
					one configured for DSTU2. 
				</p>
				
				<macro name="snippet">
					<param name="id" value="server" />
					<param name="file" value="examples/src/main/java/example/Dstu2Examples.java" />
				</macro>
				
				<p>
					Note that it is possible to share your resource provider classes between 
					servers supporting DSTU1 and servers supporting DSTU2 (including in the same WAR
					instance on the same web server). This should make the process of upgrading your
					server to the latest version of FHIR a bit easier.
				</p>
				
			</subsection>

			<subsection name="New Bundle Format">
			
				<p>
					In FHIR DSTU2, the Atom specification for Bundles has been dropped in
					favour of a new Bundle format that is a native FHIR resource. In order to
					support this change, a new Bundle structure class has been added to the
					resource structures in the DSTU2 structures JAR 
					<a href="./apidocs-dstu2/ca/uhn/fhir/model/dstu2/resource/Bundle.html">here</a>.
				</p>
				<p>
					If you are working with Bundles directly in your application, it is recommended
					to migrate to this new bundle structure. The "old" 
					<a href="./apidocs/ca/uhn/fhir/model/api/Bundle.html">Bundle</a>
					class will work, but the new one is generated from the FHIR specification so it 
					is better aligned to the spec in terms of method names, JavaDocs, etc.
				</p>
				<p>
					Because the new bundle type is a resource like any other resource, you should
					parse and encode it using the 
					<code><a href="./apidocs/ca/uhn/fhir/parser/IParser.html#parseResource(java.lang.Class,%20java.lang.String)">parseResource</a></code>
					and <code>encodeResource</code> methods instead of the previously used <code>parseBundle</code> and <code>encodeBundle</code>.
				</p>
			</subsection>

		</section>
		
		<section name="HL7.org &quot;Reference Implementation&quot; Structure Classes">
			
			<p>
				Since the early days of FHIR, HL7.org has provided an
				open source "Java Reference Implementation", which is an implementation
				of a FHIR data model, parser, and client in Java.
			</p>
			<p>
				HAPI was originally started as a separate Java implementation of FHIR,
				with a fairly different focus: implementing servers with an easily 
				extendible data model. Over time though, the two Java implementations have
				shown a fair bit of overlap, so at the 2014
				<a href="http://fhir.furore.com/Events/DevDaysEval2014">DevDays</a> we decided
				to try and harmonize the two libraries.
			</p>
			<p>
				HAPI FHIR 1.1 begins the availability of a harmonized library.
			</p>
			<p>
				<b>For HAPI FHIR users:</b> This integration will bring the ability to use powerful features
				from the RI in your applications, such as the resource validator and the narrative
				generator. 
			</p>
			<p>
				<b>For RI users:</b> This integration will bring the ability to use HAPI's client
				and server frameworks in your application, as well as the ability to take advantage 
				of HAPI's code-first statically bound extension mechanism. 
			</p>
			
			<subsection name="The RI Data Model">
				<p>
					At this point, the RI integration consists of a new parallel set of
					classes representing the FHIR data model. For example, in addition to the
					Patient classes representing HAPI's DSTU1 and DSTU2 models there is now
					a new Patient class representing the RI structure (which is also a DSTU2
					structure).
				</p>
				<p>
					The reference implementation (RI) structures have been added as a new 
					maven dependency library called <code>hapi-fhir-structures-hl7org-dstu2</code>. See
					the <a href="./download.html">download page</a> for information on the Maven
					dependencies for this version of the structures.
				</p>
				<p>
					A new interface has been added which serves as a master interface
					for all resource classes: <code>org.hl7.fhir.instance.model.api.IBaseResource</code>.
					All RI resource classes will be in the package <code>org.hl7.fhir.instance.model</code>,
					as shown below.
				</p>
				<img src="./images/hapi-1.1-structs-resource.png" alt="Structures"/>
	
				<p>
					Datatypes will also be found inthe same package. Unlike HAPI datatype structures,
					which all end with "Dt", the RI primitive structure names end with "Type" and the
					RI composite structures have no suffix, as shown below.
				</p>
				<img src="./images/hapi-1.1-structs-datatypes.png" alt="Structures"/>

			</subsection>
			
			<subsection name="Using the RI Structures in Your Application">
				
				<p>
					If you want to use the RI structures in your application,
					you will need to use the "hapi-fhir-structures-hl7org-dstu2-[version].jar"
					library.
				</p>

				<p>
					Using these structures is then similar to using other structures.
				</p>
				
				<macro name="snippet">
					<param name="id" value="creatingContextHl7org" />
					<param name="file" value="examples/src/main/java/example/FhirContextIntro.java" />
				</macro>
				
			</subsection>
			
		</section>

		<section name="Upgrading Existing Applications to HAPI FHIR 1.1">
		
			<p>
				If you have an existing application built using a version of previous 
				version of HAPI FHIR, there is one change that may affect you. As shown above,
				a new interface called <code>IBaseResource</code> has been introduced, and the
				<code>IResource</code> interface extends from it. Many methods in the API which 
				previously returned <code>IResource</code> now return <code>IBaseResource</code>.
			</p>
			<p>
				For these methods, you may cast the <code>IBaseResource</code> to
				<code>IResource</code>. 
			</p>
			
			<p>
				Please post any problems you might encounter trying to upgrade on the
				<a href="https://groups.google.com/d/forum/hapi-fhir">Google Group</a>. Chances are
				if it's happening to you, it's happening to others. We're happy to help.
			</p>
			
		</section>
		
	</body>

</document>
